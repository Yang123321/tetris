// Generated by purs bundle 0.13.6
var PS = {};
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];              
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["applicativeArray"] = applicativeArray;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports._updateAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (a) {
          return function (l) {
            if (i < 0 || i >= l.length) return nothing;
            var l1 = l.slice();
            l1[i] = a;
            return just(l1);
          };
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                      
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Maybe = $PS["Data.Maybe"];
  var updateAt = $foreign["_updateAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var foldM = function (dictMonad) {
      return function (f) {
          return function (a) {
              return $foreign["uncons'"](function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(a);
              })(function (b) {
                  return function (bs) {
                      return Control_Bind.bind(dictMonad.Bind1())(f(a)(b))(function (a$prime) {
                          return foldM(dictMonad)(f)(a$prime)(bs);
                      });
                  };
              });
          };
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var alterAt = function (i) {
      return function (f) {
          return function (xs) {
              var go = function (x) {
                  var v = f(x);
                  if (v instanceof Data_Maybe.Nothing) {
                      return deleteAt(i)(xs);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return updateAt(i)(v.value0)(xs);
                  };
                  throw new Error("Failed pattern match at Data.Array (line 544, column 10 - line 546, column 32): " + [ v.constructor.name ]);
              };
              return Data_Maybe.maybe(Data_Maybe.Nothing.value)(go)(index(xs)(i));
          };
      };
  };
  exports["index"] = index;
  exports["updateAt"] = updateAt;
  exports["alterAt"] = alterAt;
  exports["foldM"] = foldM;
  exports["range"] = $foreign.range;
  exports["replicate"] = $foreign.replicate;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupUnit = new Semigroup(function (v) {
      return function (v1) {
          return Data_Unit.unit;
      };
  });
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var monoidUnit = new Monoid(function () {
      return Data_Semigroup.semigroupUnit;
  }, Data_Unit.unit);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["sequence"] = sequence;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setInterval"] = $foreign.setInterval;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["fillRect"] = $foreign.fillRect;
  exports["clearRect"] = $foreign.clearRect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Timer = $PS["Effect.Timer"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];                
  var zSquare = [ [ false, true, false, false ], [ false, true, true, false ], [ false, false, true, false ], [ false, false, false, false ] ];
  var updateBoardAt = function (bool) {
      return function (b) {
          return function (v) {
              var t = function (a) {
                  return Data_Array.updateAt(v.value1)(bool)(a);
              };
              return Data_Array.alterAt(v.value0)(t)(b);
          };
      };
  };
  var updateBoardAt$prime = function (tuple) {
      return function (bool) {
          return function (board) {
              return updateBoardAt(bool)(board)(tuple);
          };
      };
  };
  var readBoardAt = function (v) {
      return function (board) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(board)(v.value0))(function (a) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Array.index(a)(v.value1))(function (b) {
                  return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(b);
              });
          });
      };
  };
  var readBoardList = function (list) {
      return function (board) {
          return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(Data_Functor.map(Data_Functor.functorArray)(function (t) {
              return readBoardAt(t)(board);
          })(list));
      };
  };
  var moveRight = function (v) {
      return new Data_Tuple.Tuple(v.value0, v.value1 + 1 | 0);
  };
  var moveLeft = function (v) {
      return new Data_Tuple.Tuple(v.value0, v.value1 - 1 | 0);
  };
  var moveGameState$prime = function (f) {
      return function (gameState) {
          var newPositon = f(gameState.moveSquare.position);
          return {
              board: gameState.board,
              moveSquare: {
                  position: newPositon,
                  square: gameState.moveSquare.square
              }
          };
      };
  };
  var moveDown = function (v) {
      return new Data_Tuple.Tuple(v.value0 + 1 | 0, v.value1);
  };
  var lSquare = [ [ true, false, false, false ], [ true, false, false, false ], [ true, false, false, false ], [ true, false, false, false ] ];
  var initBoard$prime = function (rows) {
      return function (clows) {
          return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(1)(rows))(function (i) {
              return [ Data_Array.replicate(clows)(false) ];
          });
      };
  };
  var extendTuple = function (v) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(v.value0)(v.value0 - 3 | 0))(function (i) {
          return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(v.value1)(v.value1 + 3 | 0))(function (j) {
              return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(i, j));
          });
      });
  };
  var t1 = extendTuple(new Data_Tuple.Tuple(0, 20));
  var extendSquare = function (square) {
      return Data_Array.concat(Data_Array.reverse(square));
  };
  var drawARect = function (ctx) {
      return function (v) {
          return function (b) {
              return function __do() {
                  (function () {
                      if (b) {
                          Graphics_Canvas.setFillStyle(ctx)("#0000FF")();
                          return Graphics_Canvas.fillRect(ctx)({
                              height: 25.0,
                              width: 25.0,
                              x: Data_Int.toNumber(v.value1) * 25.0,
                              y: Data_Int.toNumber(v.value0) * 25.0 + 100.0
                          })();
                      };
                      Graphics_Canvas.setFillStyle(ctx)("#00FF00")();
                      return Graphics_Canvas.fillRect(ctx)({
                          height: 25.0,
                          width: 25.0,
                          x: Data_Int.toNumber(v.value1) * 25.0,
                          y: Data_Int.toNumber(v.value0) * 25.0 + 100.0
                      })();
                  })();
                  return Graphics_Canvas.setFillStyle(ctx)("#00FF00")();
              };
          };
      };
  };
  var drawARect$prime = function (ctx) {
      return function (board) {
          return function (tuple) {
              var r = Data_Maybe.fromMaybe(false)(readBoardAt(tuple)(board));
              return drawARect(ctx)(tuple)(r);
          };
      };
  };
  var drawMoveSquare$prime = function (ctx) {
      return function (moveSquare) {
          return function (v) {
              var bool = Data_Maybe.fromMaybe(false)(readBoardAt(v)(moveSquare.square));
              return drawARect(ctx)(new Data_Tuple.Tuple((moveSquare.position.value0 + v.value0 | 0) - 3 | 0, moveSquare.position.value1 + v.value1 | 0))(bool);
          };
      };
  };
  var boardWidth = 12;
  var boardHeight = 21;
  var changeListA = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(boardHeight - 1 | 0))(function (i) {
      return Control_Bind.bind(Control_Bind.bindArray)([ 0, boardWidth - 1 | 0 ])(function (j) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(i, j));
      });
  });
  var changeListB = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(boardWidth - 1 | 0))(function (j) {
      return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(boardHeight - 1 | 0, j));
  });
  var initBoard = (function () {
      var baseBoard = initBoard$prime(boardHeight)(boardWidth);
      return Data_Array.foldM(Data_Maybe.monadMaybe)(updateBoardAt(true))(baseBoard)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(changeListA)(changeListB));
  })();
  var isAre = function (v) {
      return v.value0 > (-1 | 0) && (v.value0 < boardHeight && (v.value1 > (-1 | 0) && v.value1 < boardWidth));
  };
  var sliceExtendBoard = function (v) {
      return function (board) {
          var tread = function (v1) {
              var $54 = isAre(v1);
              if ($54) {
                  return Data_Maybe.fromMaybe(false)(readBoardAt(v1)(board));
              };
              return false;
          };
          return Data_Functor.map(Data_Functor.functorArray)(tread)(extendTuple(v));
      };
  };
  var checkCollision = function (board) {
      return function (moveSquare) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(false)(Data_Array.zipWith(Data_HeytingAlgebra.conj(Data_HeytingAlgebra.heytingAlgebraBoolean))(sliceExtendBoard(moveSquare.position)(board))(extendSquare(moveSquare.square)));
      };
  };
  var moveGameState = function (f) {
      return function (gameState) {
          var newGameState = moveGameState$prime(f)(gameState);
          var $59 = checkCollision(newGameState.board)(newGameState.moveSquare);
          if ($59) {
              return Data_Maybe.Nothing.value;
          };
          return new Data_Maybe.Just(newGameState);
      };
  };
  var writeBoardAt = function (moveSquare) {
      return function (board) {
          return function (v) {
              var ntuple = new Data_Tuple.Tuple((moveSquare.position.value0 + v.value0 | 0) - 3 | 0, moveSquare.position.value1 + v.value1 | 0);
              var $64 = isAre(ntuple);
              if ($64) {
                  var bv = Data_Maybe.fromMaybe(false)(readBoardAt(ntuple)(board));
                  var bs = Data_Maybe.fromMaybe(false)(readBoardAt(v)(moveSquare.square));
                  return Data_Maybe.fromMaybe(board)(updateBoardAt(bv || bs)(board)(ntuple));
              };
              return board;
          };
      };
  };
  var bSquare = [ [ false, false, false, false ], [ false, true, true, false ], [ false, true, true, false ], [ false, false, false, false ] ];
  var bMoveSquare = {
      position: new Data_Tuple.Tuple(9, 5),
      square: zSquare
  };
  var initGameState = {
      board: Data_Maybe.fromMaybe([  ])(initBoard),
      moveSquare: bMoveSquare
  };
  var allSquare = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(3))(function (i) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(3))(function (j) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(i, j));
      });
  });
  var drawMoveSquare = function (ctx) {
      return function (moveSquare) {
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Effect.monoidEffect(Data_Monoid.monoidUnit))(drawMoveSquare$prime(ctx)(moveSquare))(allSquare);
      };
  };
  var mergeBoardAndMoveSquare = function (board) {
      return function (moveSquare) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(writeBoardAt(moveSquare))(board)(allSquare);
      };
  };
  var dealEvent = function (ref) {
      return function __do() {
          var gameState = Effect_Ref.read(ref)();
          (function () {
              var v = moveGameState(moveDown)(gameState);
              if (v instanceof Data_Maybe.Nothing) {
                  return Effect_Ref.write({
                      board: mergeBoardAndMoveSquare(gameState.board)(gameState.moveSquare),
                      moveSquare: {
                          position: new Data_Tuple.Tuple(0, 4),
                          square: zSquare
                      }
                  })(ref)();
              };
              if (v instanceof Data_Maybe.Just) {
                  return Effect_Ref.write(v.value0)(ref)();
              };
              throw new Error("Failed pattern match at Main (line 246, column 3 - line 251, column 48): " + [ v.constructor.name ]);
          })();
          return Effect_Console.log("in deal event circle")();
      };
  };
  var allBoard = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(20))(function (i) {
      return Control_Bind.bind(Control_Bind.bindArray)(Data_Array.range(0)(11))(function (j) {
          return Control_Applicative.pure(Control_Applicative.applicativeArray)(new Data_Tuple.Tuple(i, j));
      });
  });
  var drawBoard = function (ctx) {
      return function (b) {
          return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Effect.monoidEffect(Data_Monoid.monoidUnit))(drawARect$prime(ctx)(b))(allBoard);
      };
  };
  var render = function (ctx) {
      return function (ref) {
          return function __do() {
              var gameState = Effect_Ref.read(ref)();
              Graphics_Canvas.clearRect(ctx)({
                  height: 1200.0,
                  width: 800.0,
                  x: 0.0,
                  y: 0.0
              })();
              drawBoard(ctx)(gameState.board)();
              drawMoveSquare(ctx)(gameState.moveSquare)();
              return Effect_Console.log("in render circle")();
          };
      };
  };
  var work = function (ctx) {
      return function (ref) {
          return function __do() {
              dealEvent(ref)();
              return render(ctx)(ref)();
          };
      };
  };
  var main = function __do() {
      var canvas = Graphics_Canvas.getCanvasElementById("canvas")();
      var ref = Effect_Ref["new"](initGameState)();
      (function () {
          if (canvas instanceof Data_Maybe.Nothing) {
              return Effect_Console.log("nothing")();
          };
          if (canvas instanceof Data_Maybe.Just) {
              var ctx = Graphics_Canvas.getContext2D(canvas.value0)();
              Graphics_Canvas.setFillStyle(ctx)("#0000FF")();
              var t = Effect_Timer.setInterval(500)(work(ctx)(ref))();
              return Effect_Console.log("find context2d")();
          };
          throw new Error("Failed pattern match at Main (line 265, column 3 - line 272, column 27): " + [ canvas.constructor.name ]);
      })();
      Effect_Console.log("Hello sailor!")();
      return Effect_Console.log("nice")();
  };
  exports["boardWidth"] = boardWidth;
  exports["boardHeight"] = boardHeight;
  exports["initGameState"] = initGameState;
  exports["initBoard'"] = initBoard$prime;
  exports["initBoard"] = initBoard;
  exports["changeListA"] = changeListA;
  exports["changeListB"] = changeListB;
  exports["updateBoardAt"] = updateBoardAt;
  exports["updateBoardAt'"] = updateBoardAt$prime;
  exports["readBoardAt"] = readBoardAt;
  exports["readBoardList"] = readBoardList;
  exports["lSquare"] = lSquare;
  exports["zSquare"] = zSquare;
  exports["bSquare"] = bSquare;
  exports["extendSquare"] = extendSquare;
  exports["isAre"] = isAre;
  exports["extendTuple"] = extendTuple;
  exports["t1"] = t1;
  exports["sliceExtendBoard"] = sliceExtendBoard;
  exports["checkCollision"] = checkCollision;
  exports["bMoveSquare"] = bMoveSquare;
  exports["moveGameState'"] = moveGameState$prime;
  exports["moveGameState"] = moveGameState;
  exports["writeBoardAt"] = writeBoardAt;
  exports["mergeBoardAndMoveSquare"] = mergeBoardAndMoveSquare;
  exports["moveRight"] = moveRight;
  exports["moveLeft"] = moveLeft;
  exports["moveDown"] = moveDown;
  exports["allBoard"] = allBoard;
  exports["drawARect'"] = drawARect$prime;
  exports["drawBoard"] = drawBoard;
  exports["drawMoveSquare'"] = drawMoveSquare$prime;
  exports["allSquare"] = allSquare;
  exports["drawMoveSquare"] = drawMoveSquare;
  exports["drawARect"] = drawARect;
  exports["render"] = render;
  exports["dealEvent"] = dealEvent;
  exports["work"] = work;
  exports["main"] = main;
})(PS);
PS["Main"].main();